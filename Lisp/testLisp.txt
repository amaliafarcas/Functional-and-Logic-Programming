;isInSubtree (st n) = 0, st - nil
;                   1, st=n
;                    (isInSubtree (car st) n)) + (isInSubtree (cdr st) n), car st -list
;                       (isInSubtree (cdr st) n c), oth

;findPath (st n) = (car st), car st =n
;                   cons (car st) , findPath (cdr(st) n), car st - atom
;                   findPath (cdr(st) n), car st - list and isInSubtree (car st, n) != 1
;                   findPath (car(st) n), car st - list and isInSubtree (car st, n) != 1

;main (t n) = cons car t, main(cdr t, n); car t - atom
;           findpath(car t, n), isInSub car t = 1
;           findPath(Cdr t, n), oth

(defun isInSubtree (st n)
    (cond
        ((And (atom st) (= st n)) 1)
        ((atom st) 0)
        ((listp st) (apply #'+ (mapcar (lambda(a) 'isInSubtree a n) st)))
    )
)

(print(isInSubtree `(1 (2) (3 (4)(5))) 5))

(defun findPath (st n)
    (cond
        ((and (atom (CAr st) (= (CAr st) n))) (list n))
        ((atom (Car st)) (cons (car st) (findPath (cdr st) n)))
        ((and (listp (CAr st)) (= (isInSubtree (car l) n) 1)) (findPath (car l) n))
        (t (findPath (cdr l) n))
    )
)

(defun main (tree n)
    (cond
        ((atom (car tree)) (cons (Car tree) (main (cdr tree) n)))
        ((= (isInSubtree (car tree) 1)) (findPath (car tree) n))
        (t (findPath (Cdr tree) n))
    )
)


    
    
    
    